{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/src/components/Editor/Note.js\";\n\n/* eslint-disable */\nimport React from 'react';\nimport { EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\nimport { withRouter } from 'react-router-dom';\nimport { Input, Button, Select, Tabs, Icon, Switch, Slider } from 'antd';\nimport request from 'request';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport Alert from 'react-s-alert';\nimport 'react-s-alert/dist/s-alert-default.css';\nimport 'react-s-alert/dist/s-alert-css-effects/jelly.css';\nimport '../../css/note.css';\nimport 'antd/dist/antd.css';\nimport NavigationBar from \"../NavigationBar\";\nimport ConvertToPDF from \"./ToolBarOptions/ConvertToPDF\";\nimport HyphenationOption from \"./ToolBarOptions/Hyphenation\";\nimport NoteColor from \"./ToolBarOptions/NoteColor\";\nimport SpeechOption from \"./ToolBarOptions/TextToSpeech\";\nimport WordSpacingOption from \"./ToolBarOptions/WordSpacing\";\nimport LineSpacingOption from \"./ToolBarOptions/LineSpacing\";\n\nvar Note =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Note, _React$Component);\n\n  function Note(props) {\n    var _this;\n\n    _classCallCheck(this, Note);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Note).call(this, props));\n\n    _this._handleKeyPress = function (e) {\n      if (e.key === 'Enter') {\n        console.log('do validate');\n      }\n    };\n\n    _this.state = {\n      editorState: EditorState.createEmpty(),\n      noteCategory: undefined,\n      noteTitle: undefined,\n      noteCategoryIconColor: undefined,\n      toolsButtonHighlight: {\n        'background-color': '#466fb5',\n        'color': 'white',\n        isSelected: true\n      },\n      noteSettingsButtonHighlight: {\n        'border': 'none',\n        isSelected: false\n      }\n    };\n    hyphenate = hyphenate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.focus = function () {\n      return _this.refs.editor.focus();\n    };\n\n    _this.onChange = function (editorState) {\n      return _this.setState({\n        editorState: editorState\n      });\n    };\n\n    _this.handleKeyCommand = function (command) {\n      return _this._handleKeyCommand(command);\n    };\n\n    _this.changeToolBar = _this.changeToolBar.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Note, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var noteID = this.props.location.state.noteID;\n      var fetchNote = {\n        method: 'GET',\n        url: \"http://127.0.0.1:5000/fetch-note/\".concat(String(noteID)),\n        qs: {\n          email: localStorage.getItem('email'),\n          noteID: noteID\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n      request(fetchNote, function (error, response, body) {\n        var parsedData = JSON.parse(body);\n\n        if (parsedData.noteSettings) {\n          setDocumentWordSpacing(parsedData.wordSpacing);\n          setDocumentLineSpacing(parsedData.lineSpacing);\n          var contentState = parsedData.noteSettings;\n          this.setState({\n            editorState: EditorState.createWithContent(convertFromRaw(contentState)),\n            noteColor: parsedData.noteColor,\n            wordSpacing: parsedData.wordSpacing,\n            lineSpacing: parsedData.lineSpacing\n          });\n        }\n\n        if (parsedData.title) {\n          var _contentState = parsedData.content;\n          this.setState({\n            editorState: EditorState.createWithContent(convertFromRaw(_contentState)),\n            noteTitle: parsedData.title,\n            noteCategory: parsedData.category,\n            noteCategoryIconColor: \"#466fb5\",\n            noteColor: parsedData.noteColor\n          });\n        }\n      }.bind(this));\n    }\n  }, {\n    key: \"_handleKeyCommand\",\n    value: function _handleKeyCommand(command) {\n      var editorState = this.state.editorState;\n      var newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        this.onChange(newState);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"saveNote\",\n    value: function saveNote(title, category, noteID, noteContent) {\n      if (!title) {\n        this.handleJelly();\n      } else {\n        var convertedNoteContent = convertToRaw(noteContent);\n        var obj = {\n          title: title,\n          category: category,\n          noteID: noteID,\n          noteContent: convertedNoteContent\n        };\n        var saveNote = {\n          method: 'POST',\n          url: 'http://127.0.0.1:5000/save-note',\n          body: JSON.stringify(obj),\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        };\n        return request(saveNote);\n      }\n    }\n  }, {\n    key: \"goToDashBoard\",\n    value: function () {\n      var _goToDashBoard = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(title) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (title) {\n                  _context.next = 4;\n                  break;\n                }\n\n                this.handleJelly();\n                _context.next = 7;\n                break;\n\n              case 4:\n                _context.next = 6;\n                return this.saveNote(this.state.noteTitle, this.state.noteCategory, this.props.location.state.noteID, this.state.editorState.getCurrentContent());\n\n              case 6:\n                this.props.history.push(\"/dashboard\");\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function goToDashBoard(_x) {\n        return _goToDashBoard.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"speechNote\",\n    value: function speechNote(noteContent) {\n      var text = '';\n\n      for (var line in noteContent.blocks) {\n        text = text + noteContent.blocks[line].text + \". \";\n      }\n\n      return text;\n    }\n  }, {\n    key: \"handleJelly\",\n    value: function handleJelly() {\n      Alert.error('Please Enter a Note Header!', {\n        position: 'top-right',\n        effect: 'jelly'\n      });\n    }\n  }, {\n    key: \"changeToolBar\",\n    value: function changeToolBar(key) {\n      if (key === \"tools\") {\n        this.setState({\n          toolsButtonHighlight: {\n            'background-color': '#466fb5',\n            'color': 'white',\n            isSelected: true\n          },\n          noteSettingsButtonHighlight: {\n            'border': 'none',\n            isSelected: false\n          },\n          'toolbar': {},\n          'toolbarCustomButtons': []\n        });\n      } else if (key === \"noteSettings\") {\n        this.setState({\n          noteSettingsButtonHighlight: {\n            'background-color': '#466fb5',\n            'color': 'white',\n            isSelected: true\n          },\n          toolsButtonHighlight: {\n            'border': 'none',\n            isSelected: false\n          },\n          'toolbar': {\n            'options': []\n          },\n          'toolbarCustomButtons': [React.createElement(HyphenationOption, {\n            hyphenate: hyphenate,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }), React.createElement(WordSpacingOption, {\n            setDocumentWordSpacing: setDocumentWordSpacing,\n            noteID: this.props.location.state.noteID,\n            wordSpacing: this.state.wordSpacing,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136\n            },\n            __self: this\n          }), React.createElement(LineSpacingOption, {\n            setDocumentLineSpacing: setDocumentLineSpacing,\n            noteID: this.props.location.state.noteID,\n            lineSpacing: this.state.lineSpacing,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }), React.createElement(SpeechOption, {\n            speechText: convertToRaw(this.state.editorState.getCurrentContent()),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138\n            },\n            __self: this\n          }), React.createElement(NoteColor, {\n            noteColor: this.state.noteColor,\n            noteID: this.props.location.state.noteID,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            },\n            __self: this\n          })]\n        });\n      }\n    }\n  }, {\n    key: \"changeNoteCategory\",\n    value: function changeNoteCategory(noteCategory) {\n      if (noteCategory) {\n        this.setState({\n          noteCategory: noteCategory,\n          noteCategoryIconColor: \"#466fb5\"\n        });\n      } else {\n        this.setState({\n          noteCategory: noteCategory,\n          noteCategoryIconColor: \"gray\"\n        });\n      }\n    }\n  }, {\n    key: \"showSelectedButton\",\n    value: function showSelectedButton(buttonType) {\n      if (buttonType === \"tools\") {\n        if (!this.state.toolsButtonHighlight.isSelected) {\n          this.setState({\n            'toolsButtonHighlight': {\n              'background-color': '#466fb5',\n              'color': 'white',\n              isSelected: false\n            }\n          });\n        }\n      }\n\n      if (buttonType === \"noteSettings\") {\n        if (!this.state.noteSettingsButtonHighlight.isSelected) {\n          this.setState({\n            'noteSettingsButtonHighlight': {\n              'background-color': '#466fb5',\n              'color': 'white',\n              isSelected: false\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"hideSelectedButton\",\n    value: function hideSelectedButton(buttonType) {\n      if (buttonType === \"tools\") {\n        if (!this.state.toolsButtonHighlight.isSelected) {\n          this.setState({\n            'toolsButtonHighlight': {\n              'border': 'none',\n              isSelected: false\n            }\n          });\n        }\n      }\n\n      if (buttonType === \"noteSettings\") {\n        if (!this.state.noteSettingsButtonHighlight.isSelected) {\n          this.setState({\n            'noteSettingsButtonHighlight': {\n              'border': 'none',\n              isSelected: false\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var editorState = this.state.editorState;\n      document.body.style.backgroundColor = \"#f5f5f5\";\n      return React.createElement(\"div\", {\n        style: {\n          background: \"#f5f5f5\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(NavigationBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"add-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Input, {\n        className: \"enter-title-here\",\n        placeholder: \"Untitled\",\n        onKeyPress: this._handleKeyPress,\n        value: this.state.noteTitle,\n        onChange: function onChange(noteTitle) {\n          return _this2.setState({\n            noteTitle: noteTitle.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }), React.createElement(Icon, {\n        type: \"book\",\n        theme: \"filled\",\n        style: {\n          'color': this.state.noteCategoryIconColor\n        },\n        className: \"note-category-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), React.createElement(Input, {\n        className: \"enter-category-here\",\n        placeholder: \"Category\",\n        value: this.state.noteCategory,\n        onChange: function onChange(noteCategory) {\n          return _this2.changeNoteCategory(noteCategory.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), React.createElement(ConvertToPDF, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tab-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(Button, {\n        style: this.state.toolsButtonHighlight,\n        className: \"tab-buttons\",\n        onMouseEnter: function onMouseEnter() {\n          return _this2.showSelectedButton(\"tools\");\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this2.hideSelectedButton(\"tools\");\n        },\n        onClick: function onClick() {\n          return _this2.changeToolBar(\"tools\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Tools\"), React.createElement(Button, {\n        style: this.state.noteSettingsButtonHighlight,\n        className: \"tab-buttons\",\n        onMouseEnter: function onMouseEnter() {\n          return _this2.showSelectedButton(\"noteSettings\");\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this2.hideSelectedButton(\"noteSettings\");\n        },\n        onClick: function onClick() {\n          return _this2.changeToolBar(\"noteSettings\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Note Settings\")), React.createElement(Alert, {\n        stack: true,\n        timeout: 3000,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"RichEditor-root\",\n        id: \"textEdiotr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Editor, {\n        spellCheck: true,\n        editorState: editorState,\n        toolbarClassName: \"rdw-storybook-toolbar\",\n        wrapperStyle: {\n          background: \"#f5f5f5\"\n        },\n        editorStyle: {\n          backgroundColor: this.state.noteColor\n        },\n        onEditorStateChange: this.onChange,\n        toolbarCustomButtons: this.state.toolbarCustomButtons,\n        toolbar: this.state.toolbar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), React.createElement(Button, {\n        style: {\n          \"width\": \"100%\"\n        },\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this2.goToDashBoard(_this2.state.noteTitle);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Go To Dashboard\"));\n    }\n  }]);\n\n  return Note;\n}(React.Component);\n\nfunction setDocumentWordSpacing(wordSpacing) {\n  var textfiled = document.getElementsByClassName('DraftEditor-root');\n  textfiled[0].style.wordSpacing = wordSpacing;\n}\n\nfunction setDocumentLineSpacing(lineSpacing) {\n  var textfiled = document.getElementsByClassName('DraftEditor-root');\n  textfiled[0].style.lineHeight = lineSpacing;\n} // Function for hyphenating the contents in text editor, binded with Note class.\n\n\nfunction hyphenate(child) {\n  // hyphenation on\n  var newContents = convertToRaw(this.state.editorState.getCurrentContent());\n  console.log(newContents);\n  var hyphenation = \"\"; // enable hyphenation\n\n  if (child) {\n    var Hypher = require('hypher'),\n        english = require('hyphenation.en-us'),\n        h = new Hypher(english);\n\n    for (var line = 0; line < newContents.blocks.length; line++) {\n      //counts the number of dots added\n      var numberOfDots = 0; //parse the line into words by spaces\n\n      var oneLine = newContents.blocks[line]['text'].split(\" \");\n      var hyphenatedLine = \"\"; //hyphenate each work\n\n      for (var i = 0; i < oneLine.length; i++) {\n        var hyphenatedWord = h.hyphenate(oneLine[i]);\n\n        for (var j = 0; j < hyphenatedWord.length - 1; j++) {\n          // add unicode dot for each syllables\n          hyphenatedLine += hyphenatedWord[j] + \"\\u2022\";\n          numberOfDots += 1;\n        }\n\n        hyphenatedLine += hyphenatedWord[hyphenatedWord.length - 1] + \" \";\n      }\n\n      newContents.blocks[line]['text'] = hyphenatedLine; //change inline css style for the extra dot characters\n\n      newContents.blocks[line]['inlineStyleRanges'][0]['length'] += numberOfDots;\n      newContents.blocks[line]['inlineStyleRanges'][1]['length'] += numberOfDots;\n    } //convert to  note content\n\n\n    console.log(newContents);\n    this.setState({\n      editorState: EditorState.createWithContent(convertFromRaw(newContents))\n    });\n  } //eliminate the splitter\n  else {\n      console.log();\n      var restored = hyphenation.split(\"\\u2022\");\n      var str = \"\";\n\n      for (var i = 0; i < restored.length - 1; i++) {\n        str += restored[i] + \" \";\n      }\n\n      str += restored[restored.length - 1];\n    }\n}\n\nexport default withRouter(Note);","map":{"version":3,"sources":["/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/src/components/Editor/Note.js"],"names":["React","EditorState","RichUtils","convertToRaw","convertFromRaw","withRouter","Input","Button","Select","Tabs","Icon","Switch","Slider","request","Editor","Alert","NavigationBar","ConvertToPDF","HyphenationOption","NoteColor","SpeechOption","WordSpacingOption","LineSpacingOption","Note","props","_handleKeyPress","e","key","console","log","state","editorState","createEmpty","noteCategory","undefined","noteTitle","noteCategoryIconColor","toolsButtonHighlight","isSelected","noteSettingsButtonHighlight","hyphenate","bind","focus","refs","editor","onChange","setState","handleKeyCommand","command","_handleKeyCommand","changeToolBar","noteID","location","fetchNote","method","url","String","qs","email","localStorage","getItem","headers","error","response","body","parsedData","JSON","parse","noteSettings","setDocumentWordSpacing","wordSpacing","setDocumentLineSpacing","lineSpacing","contentState","createWithContent","noteColor","title","content","category","newState","noteContent","handleJelly","convertedNoteContent","obj","saveNote","stringify","getCurrentContent","history","push","text","line","blocks","position","effect","buttonType","document","style","backgroundColor","background","target","value","changeNoteCategory","showSelectedButton","hideSelectedButton","toolbarCustomButtons","toolbar","goToDashBoard","Component","textfiled","getElementsByClassName","lineHeight","child","newContents","hyphenation","Hypher","require","english","h","length","numberOfDots","oneLine","split","hyphenatedLine","i","hyphenatedWord","j","restored","str"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React from 'react';\nimport { EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\nimport { withRouter } from 'react-router-dom';\nimport { Input, Button, Select, Tabs, Icon, Switch, Slider } from 'antd';\nimport request from 'request';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport Alert from 'react-s-alert';\nimport 'react-s-alert/dist/s-alert-default.css';\nimport 'react-s-alert/dist/s-alert-css-effects/jelly.css';\nimport '../../css/note.css';\nimport 'antd/dist/antd.css';\nimport NavigationBar from \"../NavigationBar\";\nimport ConvertToPDF from \"./ToolBarOptions/ConvertToPDF\";\nimport HyphenationOption from \"./ToolBarOptions/Hyphenation\";\nimport NoteColor from \"./ToolBarOptions/NoteColor\";\nimport SpeechOption from \"./ToolBarOptions/TextToSpeech\";\nimport WordSpacingOption from \"./ToolBarOptions/WordSpacing\";\nimport LineSpacingOption from \"./ToolBarOptions/LineSpacing\";\n\nclass Note extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      noteCategory: undefined,\n      noteTitle: undefined,\n        noteCategoryIconColor: undefined,\n        toolsButtonHighlight: {'background-color': '#466fb5', 'color': 'white', isSelected: true},\n        noteSettingsButtonHighlight: {'border': 'none', isSelected: false}\n    };\n    hyphenate = hyphenate.bind(this)\n    this.focus = () => this.refs.editor.focus();\n    this.onChange = editorState => this.setState({ editorState });\n    this.handleKeyCommand = command => this._handleKeyCommand(command);\n    this.changeToolBar = this.changeToolBar.bind(this);\n  }\n  componentDidMount() {\n    const noteID = this.props.location.state.noteID;\n    const fetchNote = {\n      method: 'GET',\n      url: `http://127.0.0.1:5000/fetch-note/${String(noteID)}`,\n      qs: { email: localStorage.getItem('email'), noteID },\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    };\n    request(fetchNote, function (error, response, body) {\n        var parsedData = JSON.parse(body);\n        if (parsedData.noteSettings){\n            setDocumentWordSpacing(parsedData.wordSpacing);\n            setDocumentLineSpacing(parsedData.lineSpacing);\n            let contentState = parsedData.noteSettings\n            this.setState({\n                editorState: EditorState.createWithContent(convertFromRaw((contentState))),\n                noteColor: parsedData.noteColor,\n                wordSpacing: parsedData.wordSpacing,\n                lineSpacing: parsedData.lineSpacing\n            });\n        }\n        if (parsedData.title){\n            let contentState = parsedData.content;\n            this.setState({\n                editorState: EditorState.createWithContent(convertFromRaw((contentState))),\n                noteTitle: parsedData.title,\n                noteCategory: parsedData.category,\n                noteCategoryIconColor: \"#466fb5\",\n                noteColor: parsedData.noteColor\n            });\n        }\n    }.bind(this));\n  }\n\n    _handleKeyCommand(command) {\n        const {editorState} = this.state;\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n            this.onChange(newState);\n            return true;\n        }\n        return false;\n    }\n\n    saveNote(title, category, noteID, noteContent){\n        if(!title){\n            this.handleJelly()\n        } else {\n            const convertedNoteContent = convertToRaw(noteContent)\n            const obj = {title, category, noteID, noteContent: convertedNoteContent}\n            var saveNote = {\n                method: 'POST',\n                url: 'http://127.0.0.1:5000/save-note',\n                body: JSON.stringify(obj),\n                headers: {'Content-Type': 'application/x-www-form-urlencoded' }\n            };\n            return request(saveNote)\n        }\n    }\n\n    async goToDashBoard(title){\n        if(!title){\n            this.handleJelly()\n        } else {\n            await this.saveNote(this.state.noteTitle, this.state.noteCategory, this.props.location.state.noteID, this.state.editorState.getCurrentContent())\n            this.props.history.push(\"/dashboard\")\n        }\n    }\n\n    speechNote(noteContent){\n        var text = '';\n        for (var line in noteContent.blocks){\n            text = text + (noteContent.blocks[line].text) + \". \"\n        }\n        return text\n    }\n    handleJelly() {\n        Alert.error('Please Enter a Note Header!', {\n            position: 'top-right',\n            effect: 'jelly'\n        });\n    }\n    changeToolBar(key){\n        if (key === \"tools\"){\n            this.setState({\n                toolsButtonHighlight: {'background-color': '#466fb5', 'color': 'white', isSelected: true},\n                noteSettingsButtonHighlight: {'border': 'none', isSelected: false},\n                'toolbar': {}, 'toolbarCustomButtons': []\n            })\n        }\n        else if (key === \"noteSettings\") {\n            this.setState({\n                noteSettingsButtonHighlight: {'background-color': '#466fb5', 'color': 'white', isSelected: true},\n                toolsButtonHighlight: {'border': 'none', isSelected: false},\n                'toolbar': {'options': []},\n                'toolbarCustomButtons': [\n                    <HyphenationOption hyphenate={hyphenate}/>,\n                    <WordSpacingOption setDocumentWordSpacing={setDocumentWordSpacing} noteID={this.props.location.state.noteID} wordSpacing={this.state.wordSpacing}/>,\n                    <LineSpacingOption setDocumentLineSpacing={setDocumentLineSpacing} noteID={this.props.location.state.noteID} lineSpacing={this.state.lineSpacing}/>,\n                    <SpeechOption speechText={convertToRaw(this.state.editorState.getCurrentContent())}/>,\n                    <NoteColor noteColor={this.state.noteColor} noteID={this.props.location.state.noteID}/>]\n            })\n        }\n    }\n\n    changeNoteCategory(noteCategory){\n        if(noteCategory){\n            this.setState({noteCategory, noteCategoryIconColor: \"#466fb5\"})\n        } else {\n            this.setState({noteCategory, noteCategoryIconColor: \"gray\"})\n        }\n\n    }\n\n    _handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            console.log('do validate');\n        }\n    }\n\n    showSelectedButton(buttonType){\n      if (buttonType === \"tools\"){\n          if (!this.state.toolsButtonHighlight.isSelected){\n              this.setState({'toolsButtonHighlight': {'background-color': '#466fb5', 'color': 'white', isSelected: false}})\n          }\n      }\n        if (buttonType === \"noteSettings\"){\n            if (!this.state.noteSettingsButtonHighlight.isSelected){\n                this.setState({'noteSettingsButtonHighlight': {'background-color': '#466fb5', 'color': 'white', isSelected: false}})\n            }\n        }\n\n    }\n\n    hideSelectedButton(buttonType){\n        if (buttonType === \"tools\"){\n            if (!this.state.toolsButtonHighlight.isSelected){\n                this.setState({'toolsButtonHighlight': {'border': 'none', isSelected: false}})\n            }\n        }\n        if (buttonType === \"noteSettings\"){\n            if (!this.state.noteSettingsButtonHighlight.isSelected){\n                this.setState({'noteSettingsButtonHighlight': {'border': 'none', isSelected: false}})\n            }\n\n        }\n\n    }\n    render() {\n        const {editorState} = this.state;\n        document.body.style.backgroundColor = \"#f5f5f5\"\n        return (\n            <div style={{background: \"#f5f5f5\"}}>\n                <NavigationBar/>\n                <div className={\"add-title\"}>\n                    <Input className={\"enter-title-here\"} placeholder={\"Untitled\"} onKeyPress={this._handleKeyPress} value={this.state.noteTitle} onChange={noteTitle => this.setState({noteTitle: noteTitle.target.value})}></Input>\n                    <Icon type=\"book\" theme=\"filled\" style={{'color': this.state.noteCategoryIconColor}} className={\"note-category-icon\"} />\n                    <Input className={\"enter-category-here\"} placeholder={\"Category\"} value={this.state.noteCategory} onChange={noteCategory => this.changeNoteCategory(noteCategory.target.value)}></Input>\n                    <ConvertToPDF/>\n                </div>\n                <div className={\"tab-bar\"}>\n                    <Button\n                        style={this.state.toolsButtonHighlight}\n                        className={\"tab-buttons\"}\n                        onMouseEnter={() => this.showSelectedButton(\"tools\")}\n                        onMouseLeave={() => this.hideSelectedButton(\"tools\")}\n                        onClick={() => this.changeToolBar(\"tools\")}>\n                        Tools\n                    </Button>\n                    <Button\n                        style={this.state.noteSettingsButtonHighlight}\n                        className={\"tab-buttons\"}\n                        onMouseEnter={() => this.showSelectedButton(\"noteSettings\")}\n                        onMouseLeave={() => this.hideSelectedButton(\"noteSettings\")}\n                        onClick={() => this.changeToolBar(\"noteSettings\")}>\n                        Note Settings\n                    </Button>\n                </div>\n\n                <Alert stack={true} timeout={3000} />\n            <div className=\"RichEditor-root\" id={\"textEdiotr\"}>\n                <Editor\n                    spellCheck={true}\n                    editorState={editorState}\n                    toolbarClassName=\"rdw-storybook-toolbar\"\n                    wrapperStyle={{background: \"#f5f5f5\"}}\n                    editorStyle={{backgroundColor: this.state.noteColor}}\n                    onEditorStateChange={this.onChange}\n                    toolbarCustomButtons={this.state.toolbarCustomButtons}\n                    toolbar={this.state.toolbar}\n                />\n            </div>\n                <br/>\n                <Button style={{\"width\": \"100%\"}}type=\"primary\" onClick={() => this.goToDashBoard(this.state.noteTitle)}>Go To Dashboard</Button>\n\n            </div>\n        );\n    }\n}\n\nfunction setDocumentWordSpacing(wordSpacing) {\n    var textfiled = document.getElementsByClassName('DraftEditor-root');\n    textfiled[0].style.wordSpacing = wordSpacing;\n}\n\nfunction setDocumentLineSpacing(lineSpacing) {\n    var textfiled = document.getElementsByClassName('DraftEditor-root');\n    textfiled[0].style.lineHeight = lineSpacing;\n}\n\n// Function for hyphenating the contents in text editor, binded with Note class.\nfunction hyphenate(child) {\n    // hyphenation on\n    var newContents = convertToRaw(this.state.editorState.getCurrentContent())\n    console.log(newContents)\n    var hyphenation = \"\";\n    // enable hyphenation\n    if (child) {\n        var Hypher = require('hypher'),\n            english = require('hyphenation.en-us'),\n            h = new Hypher(english);\n        for (var line = 0; line < newContents.blocks.length; line++) {\n            //counts the number of dots added\n            var numberOfDots = 0;\n            //parse the line into words by spaces\n            var oneLine = newContents.blocks[line]['text'].split(\" \");\n            var hyphenatedLine = \"\";\n            //hyphenate each work\n            for (var i = 0; i < oneLine.length; i++) {\n                var hyphenatedWord = h.hyphenate(oneLine[i]);\n                for (var j = 0; j < hyphenatedWord.length - 1; j++) {\n                    // add unicode dot for each syllables\n                    hyphenatedLine += hyphenatedWord[j] + \"\\u2022\";\n                    numberOfDots += 1;\n                }\n                hyphenatedLine += hyphenatedWord[hyphenatedWord.length - 1] + \" \";\n            }\n            newContents.blocks[line]['text'] = hyphenatedLine;\n            //change inline css style for the extra dot characters\n            newContents.blocks[line]['inlineStyleRanges'][0]['length'] += numberOfDots;\n            newContents.blocks[line]['inlineStyleRanges'][1]['length'] += numberOfDots;\n        }\n        //convert to  note content\n        console.log(newContents);\n        this.setState({\n            editorState: EditorState.createWithContent(convertFromRaw((newContents))),\n        });\n    }\n    //eliminate the splitter\n    else\n    {\n        console.log();\n        var restored = hyphenation.split(\"\\u2022\")\n        var str = \"\";\n        for (var i = 0; i < restored.length - 1; i++) {\n            str += restored[i] + \" \";\n        }\n        str += restored[restored.length - 1];\n    }\n}\n\nexport default withRouter(Note);\n"]},"metadata":{},"sourceType":"module"}