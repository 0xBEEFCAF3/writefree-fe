{"ast":null,"code":"import Alert from 'react-s-alert';\nimport 'react-s-alert/dist/s-alert-default.css';\nimport 'react-s-alert/dist/s-alert-css-effects/jelly.css';\nexport function handleAccountError(errorMessage) {\n  Alert.error(errorMessage, {\n    position: 'top-right',\n    effect: 'jelly'\n  });\n}\n\nfunction merge(left, right, option) {\n  var result = [];\n\n  while (left.length && right.length) {\n    if (option === 'lastUpdated') {\n      if (Date.parse(left[0][option]) >= Date.parse(right[0][option])) {\n        result.push(left.shift());\n      } else {\n        result.push(right.shift());\n      }\n    } else {\n      if (left[0][option].charCodeAt(0) <= right[0][option].charCodeAt(0)) {\n        result.push(left.shift());\n      } else {\n        result.push(right.shift());\n      }\n    }\n  }\n\n  while (left.length) {\n    result.push(left.shift());\n  }\n\n  while (right.length) {\n    result.push(right.shift());\n  }\n\n  return result;\n}\n\nexport function mergeSort(arr, option) {\n  if (arr.length < 2) {\n    return arr;\n  }\n\n  var middle = parseInt(arr.length / 2);\n  var left = arr.slice(0, middle);\n  var right = arr.slice(middle, arr.length);\n  return merge(mergeSort(left, option), mergeSort(right, option), option);\n}","map":{"version":3,"sources":["/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/src/defaults/constants.js"],"names":["Alert","handleAccountError","errorMessage","error","position","effect","merge","left","right","option","result","length","Date","parse","push","shift","charCodeAt","mergeSort","arr","middle","parseInt","slice"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,eAAlB;AACA,OAAO,wCAAP;AACA,OAAO,kDAAP;AAEA,OAAO,SAASC,kBAAT,CAA4BC,YAA5B,EAA0C;AAC/CF,EAAAA,KAAK,CAACG,KAAN,CAAYD,YAAZ,EAA0B;AACxBE,IAAAA,QAAQ,EAAE,WADc;AAExBC,IAAAA,MAAM,EAAE;AAFgB,GAA1B;AAID;;AAED,SAASC,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,MAAMC,MAAM,GAAG,EAAf;;AACA,SAAOH,IAAI,CAACI,MAAL,IAAeH,KAAK,CAACG,MAA5B,EAAoC;AAChC,QAAIF,MAAM,KAAK,aAAf,EAA6B;AACzB,UAAIG,IAAI,CAACC,KAAL,CAAWN,IAAI,CAAC,CAAD,CAAJ,CAAQE,MAAR,CAAX,KAA+BG,IAAI,CAACC,KAAL,CAAWL,KAAK,CAAC,CAAD,CAAL,CAASC,MAAT,CAAX,CAAnC,EAAiE;AAC7DC,QAAAA,MAAM,CAACI,IAAP,CAAYP,IAAI,CAACQ,KAAL,EAAZ;AACH,OAFD,MAEO;AACHL,QAAAA,MAAM,CAACI,IAAP,CAAYN,KAAK,CAACO,KAAN,EAAZ;AACH;AACJ,KAND,MAMO;AACH,UAAIR,IAAI,CAAC,CAAD,CAAJ,CAAQE,MAAR,EAAgBO,UAAhB,CAA2B,CAA3B,KAAiCR,KAAK,CAAC,CAAD,CAAL,CAASC,MAAT,EAAiBO,UAAjB,CAA4B,CAA5B,CAArC,EAAqE;AACjEN,QAAAA,MAAM,CAACI,IAAP,CAAYP,IAAI,CAACQ,KAAL,EAAZ;AACH,OAFD,MAEO;AACHL,QAAAA,MAAM,CAACI,IAAP,CAAYN,KAAK,CAACO,KAAN,EAAZ;AACH;AACJ;AACJ;;AAED,SAAOR,IAAI,CAACI,MAAZ,EAAoB;AAClBD,IAAAA,MAAM,CAACI,IAAP,CAAYP,IAAI,CAACQ,KAAL,EAAZ;AACD;;AACD,SAAOP,KAAK,CAACG,MAAb,EAAqB;AACnBD,IAAAA,MAAM,CAACI,IAAP,CAAYN,KAAK,CAACO,KAAN,EAAZ;AACD;;AACD,SAAOL,MAAP;AACD;;AAED,OAAO,SAASO,SAAT,CAAmBC,GAAnB,EAAwBT,MAAxB,EAAgC;AACrC,MAAIS,GAAG,CAACP,MAAJ,GAAa,CAAjB,EAAoB;AAClB,WAAOO,GAAP;AACD;;AACD,MAAMC,MAAM,GAAGC,QAAQ,CAACF,GAAG,CAACP,MAAJ,GAAa,CAAd,CAAvB;AACA,MAAMJ,IAAI,GAAGW,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaF,MAAb,CAAb;AACA,MAAMX,KAAK,GAAGU,GAAG,CAACG,KAAJ,CAAUF,MAAV,EAAkBD,GAAG,CAACP,MAAtB,CAAd;AAEA,SAAOL,KAAK,CAACW,SAAS,CAACV,IAAD,EAAOE,MAAP,CAAV,EAA0BQ,SAAS,CAACT,KAAD,EAAQC,MAAR,CAAnC,EAAoDA,MAApD,CAAZ;AACD","sourcesContent":["import Alert from 'react-s-alert';\nimport 'react-s-alert/dist/s-alert-default.css';\nimport 'react-s-alert/dist/s-alert-css-effects/jelly.css';\n\nexport function handleAccountError(errorMessage) {\n  Alert.error(errorMessage, {\n    position: 'top-right',\n    effect: 'jelly',\n  });\n}\n\nfunction merge(left, right, option) {\n  const result = [];\n  while (left.length && right.length) {\n      if (option === 'lastUpdated'){\n          if (Date.parse(left[0][option]) >= Date.parse(right[0][option])) {\n              result.push(left.shift());\n          } else {\n              result.push(right.shift());\n          }\n      } else {\n          if (left[0][option].charCodeAt(0) <= right[0][option].charCodeAt(0)) {\n              result.push(left.shift());\n          } else {\n              result.push(right.shift());\n          }\n      }\n  }\n\n  while (left.length) {\n    result.push(left.shift());\n  }\n  while (right.length) {\n    result.push(right.shift());\n  }\n  return result;\n}\n\nexport function mergeSort(arr, option) {\n  if (arr.length < 2) {\n    return arr;\n  }\n  const middle = parseInt(arr.length / 2);\n  const left = arr.slice(0, middle);\n  const right = arr.slice(middle, arr.length);\n\n  return merge(mergeSort(left, option), mergeSort(right, option), option);\n}\n"]},"metadata":{},"sourceType":"module"}