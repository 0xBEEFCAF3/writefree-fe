{"ast":null,"code":"import _classCallCheck from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/src/components/CreateAccount.js\";\nimport React from 'react';\nimport request from 'request';\nimport { Input, Button, Card } from 'antd';\nimport 'antd/dist/antd.css';\nimport { withRouter } from 'react-router-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport GoogleButton from 'react-google-button';\nimport Alert from 'react-s-alert';\nimport { handleAccountError } from '../defaults/constants';\n\nvar CreateAccount =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreateAccount, _React$Component);\n\n  function CreateAccount(props) {\n    var _this;\n\n    _classCallCheck(this, CreateAccount);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateAccount).call(this, props));\n    _this.state = {\n      email: null,\n      fullName: null,\n      password: null\n    };\n    return _this;\n  }\n\n  _createClass(CreateAccount, [{\n    key: \"createAccount\",\n    value: function createAccount(email, fullName, password) {\n      var _this2 = this;\n\n      var postCreateAnAccountInformation = {\n        method: 'POST',\n        url: 'http://127.0.0.1:5000/create-account',\n        qs: {\n          email: email,\n          fullName: fullName,\n          password: password\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n      request(postCreateAnAccountInformation, function (error, response, body) {\n        if (response.statusCode === 401) {\n          /* TODO in backend:\n             -is email valid\n             -is email duplicate\n             -is fullName valid\n             -is password valid\n           */\n          handleAccountError(error);\n        } else {\n          var parsedData = JSON.parse(body);\n          localStorage.setItem('email', email);\n          localStorage.setItem('access_token', parsedData.access_token);\n          localStorage.setItem('id', parsedData.access_token);\n          localStorage.setItem('refresh_token', parsedData.refresh_token);\n\n          _this2.props.history.push('/default-settings');\n        }\n      });\n    }\n  }, {\n    key: \"googleSignUp\",\n    value: function googleSignUp(response) {\n      var _this3 = this;\n\n      var email = response.profileObj.email;\n      var googleID = response.profileObj.googleId.toString();\n      var name = response.profileObj.name.toString();\n      var postLoginInformation = {\n        method: 'POST',\n        url: 'http://127.0.0.1:5000/create-account-google',\n        qs: {\n          email: email,\n          google_id: googleID,\n          name: name\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n      request(postLoginInformation, function (error, res, body) {\n        if (res.statusCode === 401) {\n          /* TODO in backend:\n             -is email valid\n             -is email duplicate\n             -is fullName valid\n             -is password valid\n           */\n          handleAccountError(error);\n        } else {\n          var parsedData = JSON.parse(body);\n          localStorage.setItem('email', email);\n          localStorage.setItem('access_token', parsedData.access_token);\n          localStorage.setItem('id', parsedData.access_token);\n          localStorage.setItem('refresh_token', parsedData.refresh_token);\n\n          _this3.props.history.push('/default-settings');\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      document.body.style.backgroundColor = \"#f5f5f5\";\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        timeout: 3000,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(Card, {\n        title: \"Create An Account\",\n        style: {\n          width: 400\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Input, {\n        placeholder: \"Email\",\n        onChange: function onChange(email) {\n          return _this4.setState({\n            email: email.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(Input, {\n        placeholder: \"Full Name\",\n        onChange: function onChange(fullName) {\n          return _this4.setState({\n            fullName: fullName.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(Input, {\n        placeholder: \"Password\",\n        type: \"password\",\n        onChange: function onChange(password) {\n          return _this4.setState({\n            password: password.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this4.createAccount(_this4.state.email, _this4.state.fullName, _this4.state.password);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Sign Up\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Have an account? \", React.createElement(\"a\", {\n        onClick: function onClick() {\n          return _this4.props.history.push(\"/login\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \" Login \"), \" \")), React.createElement(GoogleLogin, {\n        clientId: \"402919311024-18n9b01dptgeg774297fp4u9ir18sb6g.apps.googleusercontent.com\",\n        onSuccess: function onSuccess(succ) {\n          return _this4.googleSignUp(succ);\n        },\n        onFailure: function onFailure(fail) {\n          return _this4.googleSignUp(fail);\n        },\n        style: {\n          border: 'none',\n          background: 'none',\n          padding: 0,\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(GoogleButton, {\n        label: \"Sign up With Google\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return CreateAccount;\n}(React.Component);\n\nexport default withRouter(CreateAccount);","map":{"version":3,"sources":["/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/src/components/CreateAccount.js"],"names":["React","request","Input","Button","Card","withRouter","GoogleLogin","GoogleButton","Alert","handleAccountError","CreateAccount","props","state","email","fullName","password","postCreateAnAccountInformation","method","url","qs","headers","error","response","body","statusCode","parsedData","JSON","parse","localStorage","setItem","access_token","refresh_token","history","push","profileObj","googleID","googleId","toString","name","postLoginInformation","google_id","res","document","style","backgroundColor","width","setState","target","value","createAccount","succ","googleSignUp","fail","border","background","padding","margin","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport request from 'request';\nimport { Input, Button, Card } from 'antd';\nimport 'antd/dist/antd.css';\nimport { withRouter } from 'react-router-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport GoogleButton from 'react-google-button';\nimport Alert from 'react-s-alert';\nimport { handleAccountError } from '../defaults/constants';\n\nclass CreateAccount extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: null,\n      fullName: null,\n      password: null,\n    };\n  }\n  createAccount(email, fullName, password) {\n    const postCreateAnAccountInformation = {\n      method: 'POST',\n      url: 'http://127.0.0.1:5000/create-account',\n      qs: { email, fullName, password },\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    };\n    request(postCreateAnAccountInformation, (error, response, body) => {\n      if (response.statusCode === 401) {\n        /* TODO in backend:\n           -is email valid\n           -is email duplicate\n           -is fullName valid\n           -is password valid\n         */\n        handleAccountError(error);\n      } else {\n        const parsedData = JSON.parse(body);\n        localStorage.setItem('email', email);\n        localStorage.setItem('access_token', parsedData.access_token);\n        localStorage.setItem('id', parsedData.access_token);\n        localStorage.setItem('refresh_token', parsedData.refresh_token);\n        this.props.history.push('/default-settings');\n      }\n    });\n  }\n\n  googleSignUp(response) {\n    const email = response.profileObj.email;\n    const googleID = (response.profileObj.googleId).toString();\n    const name = (response.profileObj.name).toString();\n    const postLoginInformation = {\n      method: 'POST',\n      url: 'http://127.0.0.1:5000/create-account-google',\n      qs: { email, google_id: googleID, name },\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    };\n    request(postLoginInformation, (error, res, body) => {\n      if (res.statusCode === 401) {\n        /* TODO in backend:\n           -is email valid\n           -is email duplicate\n           -is fullName valid\n           -is password valid\n         */\n        handleAccountError(error);\n      } else {\n        const parsedData = JSON.parse(body);\n        localStorage.setItem('email', email);\n        localStorage.setItem('access_token', parsedData.access_token);\n        localStorage.setItem('id', parsedData.access_token);\n        localStorage.setItem('refresh_token', parsedData.refresh_token);\n        this.props.history.push('/default-settings');\n      }\n    });\n  }\n\n  render() {\n    document.body.style.backgroundColor = \"#f5f5f5\"\n    return (\n      <div>\n        <Alert timeout={3000} />\n        <Card\n          title=\"Create An Account\"\n          style={{ width: 400 }}\n        >\n          <Input placeholder=\"Email\" onChange={email => this.setState({ email: email.target.value })} /> <br />\n          <Input placeholder=\"Full Name\" onChange={fullName => this.setState({ fullName: fullName.target.value })} /> <br />\n          <Input placeholder=\"Password\" type=\"password\" onChange={password => this.setState({ password: password.target.value })} /> <br />\n          <Button type=\"primary\" onClick={() => this.createAccount(this.state.email, this.state.fullName, this.state.password)}>Sign Up</Button><br />\n          <Card>\n            <p>Have an account? <a onClick={() => this.props.history.push(\"/login\")}> Login </a> </p>\n          </Card>\n          <GoogleLogin\n            clientId=\"402919311024-18n9b01dptgeg774297fp4u9ir18sb6g.apps.googleusercontent.com\"\n            onSuccess={succ => this.googleSignUp(succ)}\n            onFailure={fail => this.googleSignUp(fail)}\n            style={{\n                border: 'none',\n                background: 'none',\n                padding: 0,\n                margin: 0,\n            }}\n          >\n            <GoogleButton label=\"Sign up With Google\" />\n          </GoogleLogin>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(CreateAccount);\n"]},"metadata":{},"sourceType":"module"}