{"ast":null,"code":"import deep from 'deep-diff';\nimport nested from 'nested-property';\n\nfunction isPlainObj() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.every(function (d) {\n    if (!d) return false;\n    var prototype = Object.getPrototypeOf(d);\n    return Object.prototype.toString.call(d).slice(8, -1) === 'Object' && (prototype === null || prototype === Object.getPrototypeOf({}));\n  });\n}\n\nfunction isArray() {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return args.every(function (d) {\n    return Array.isArray(d);\n  });\n}\n\nfunction isNumber() {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return args.every(function (d) {\n    return typeof d === 'number';\n  });\n}\n\nfunction treeChanges(data, nextData) {\n  return {\n    changed: function changed(key) {\n      var left = nested.get(data, key);\n      var right = nested.get(nextData, key);\n\n      if (isArray(left, right) || isPlainObj(left, right)) {\n        var diff = deep.diff(left, right);\n        return !!diff;\n      }\n\n      return left !== right;\n    },\n    changedFrom: function changedFrom(key, previous, actual) {\n      var useActual = typeof previous !== 'undefined' && typeof actual !== 'undefined';\n      var left = nested.get(data, key);\n      var right = nested.get(nextData, key);\n      var leftComparator = Array.isArray(previous) ? previous.indexOf(left) !== -1 : left === previous;\n      var rightComparator = Array.isArray(actual) ? actual.indexOf(right) !== -1 : right === actual;\n      return leftComparator && (useActual ? rightComparator : !useActual);\n    },\n    changedTo: function changedTo(key, actual) {\n      var left = nested.get(data, key);\n      var right = nested.get(nextData, key);\n      var leftComparator = Array.isArray(actual) ? !(actual.indexOf(left) !== -1) : left !== actual;\n      var rightComparator = Array.isArray(actual) ? actual.indexOf(right) !== -1 : right === actual;\n      return leftComparator && rightComparator;\n    },\n    increased: function increased(key) {\n      return isNumber(nested.get(data, key), nested.get(nextData, key)) && nested.get(data, key) < nested.get(nextData, key);\n    },\n    decreased: function decreased(key) {\n      return isNumber(nested.get(data, key), nested.get(nextData, key)) && nested.get(data, key) > nested.get(nextData, key);\n    }\n  };\n}\n\nexport default treeChanges;","map":null,"metadata":{},"sourceType":"module"}