{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar getObjectType = function getObjectType(value) {\n  return Object.prototype.toString.call(value).slice(8, -1);\n};\n\nvar isObject = function isObject(value) {\n  return _typeof(value) === 'object';\n};\n\nvar index = {\n  null: function _null(value) {\n    return value === null;\n  },\n  undefined: function undefined(value) {\n    return typeof value === 'undefined';\n  },\n  nullOrUndefined: function nullOrUndefined(value) {\n    return this.null(value) || this.undefined(value);\n  },\n  string: function string(value) {\n    return typeof value === 'string';\n  },\n  number: function number(value) {\n    return typeof value === 'number';\n  },\n  function: function _function(value) {\n    return typeof value === 'function';\n  },\n  boolean: function boolean(value) {\n    return value === true || value === false;\n  },\n  array: Array.isArray,\n  object: function object(value) {\n    return !this.nullOrUndefined(value) && (this.function(value) || isObject(value));\n  },\n  plainObject: function plainObject(value) {\n    var prototype;\n    return getObjectType(value) === 'Object' && (prototype = Object.getPrototypeOf(value), prototype === null || prototype === Object.getPrototypeOf({}));\n  },\n  date: function date(value) {\n    return getObjectType(value) === 'Date';\n  },\n  promise: function promise(value) {\n    return getObjectType(value) === 'Promise';\n  },\n  iterable: function iterable(value) {\n    return !this.nullOrUndefined(value) && this.function(value[Symbol.iterator]);\n  },\n  generator: function generator(value) {\n    return this.iterable(value) && this.function(value.next) && this.function(value.throw);\n  },\n  regexp: function regexp(value) {\n    return getObjectType(value) === 'RegExp';\n  },\n  symbol: function symbol(value) {\n    return getObjectType(value) === 'Symbol';\n  },\n  domElement: function domElement(value) {\n    var DOM_PROPERTIES_TO_CHECK = ['innerHTML', 'ownerDocument', 'style', 'attributes', 'nodeValue'];\n    return this.object(value) && !this.plainObject(value) && value.nodeType === 1 && this.string(value.nodeName) && DOM_PROPERTIES_TO_CHECK.every(function (property) {\n      return property in value;\n    });\n  }\n};\nexport default index;","map":null,"metadata":{},"sourceType":"module"}