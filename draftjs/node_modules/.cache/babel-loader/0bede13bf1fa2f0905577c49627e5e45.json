{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/src/components/Editor/Note.js\";\n\n/* eslint-disable */\nimport React from 'react';\nimport { EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\nimport { withRouter } from 'react-router-dom';\nimport { Input, Button, Icon } from 'antd';\nimport request from 'request';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport '../../css/note.css';\nimport 'antd/dist/antd.css';\nimport NavigationBar from \"../NavigationBar\";\nimport ConvertToPDF from \"./ToolBarOptions/ConvertToPDF\";\nimport HyphenationOption from \"./ToolBarOptions/Hyphenation\";\nimport NoteColor from \"./ToolBarOptions/NoteColor\";\nimport SpeechOption from \"./ToolBarOptions/TextToSpeech\";\nimport WordSpacingOption from \"./ToolBarOptions/WordSpacing\";\nimport LineSpacingOption from \"./ToolBarOptions/LineSpacing\";\nimport { stateToHTML } from 'draft-js-export-html';\n\nvar Note =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Note, _React$Component);\n\n  function Note(props) {\n    var _this;\n\n    _classCallCheck(this, Note);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Note).call(this, props));\n\n    _this._handleKeyPress = function (e) {\n      if (e.key === 'Enter') {}\n    };\n\n    _this.state = {\n      editorState: EditorState.createEmpty(),\n      noteCategory: undefined,\n      noteTitle: undefined,\n      noteCategoryIconColor: undefined,\n      toolsButtonHighlight: {\n        'backgroundColor': '#466fb5',\n        'color': 'white',\n        isSelected: true\n      },\n      noteSettingsButtonHighlight: {\n        'border': 'none',\n        isSelected: false\n      }\n    };\n    hyphenate = hyphenate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    changeNoteColor = changeNoteColor.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.focus = function () {\n      return _this.refs.editor.focus();\n    };\n\n    _this.onChange = function (editorState) {\n      return _this.setState({\n        editorState: editorState\n      });\n    };\n\n    _this.handleKeyCommand = function (command) {\n      return _this._handleKeyCommand(command);\n    };\n\n    _this.changeToolBar = _this.changeToolBar.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Note, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!localStorage.getItem('id')) {\n        return this.props.history.push('/login');\n      }\n\n      var splitValue = window.location.href.split(\"/\");\n      var noteID = splitValue[splitValue.length - 1];\n      var accessToken = localStorage.getItem('access_token');\n      var AuthStr = 'Bearer '.concat(accessToken);\n      var headers = {\n        Authorization: AuthStr,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n      var fetchNote = {\n        method: 'GET',\n        url: \"http://127.0.0.1:5000/fetch-note/\".concat(String(noteID)),\n        qs: {\n          noteID: noteID\n        },\n        headers: headers\n      };\n      request(fetchNote, function (error, response, body) {\n        if (response.statusCode === 404) {\n          return this.props.history.push('/error404');\n        }\n\n        var parsedData = JSON.parse(body);\n\n        if (parsedData.noteSettings) {\n          setDocumentWordSpacing(parsedData.wordSpacing);\n          setDocumentLineSpacing(parsedData.lineSpacing);\n          var contentState = parsedData.noteSettings;\n          this.setState({\n            editorState: EditorState.createWithContent(convertFromRaw(contentState)),\n            noteColor: parsedData.noteColor,\n            wordSpacing: parsedData.wordSpacing,\n            lineSpacing: parsedData.lineSpacing,\n            noteID: noteID,\n            isHyphenated: parsedData.isHyphenated\n          });\n        }\n\n        if (parsedData.title) {\n          var _contentState = parsedData.content;\n          this.setState({\n            editorState: EditorState.createWithContent(convertFromRaw(_contentState)),\n            noteTitle: parsedData.title,\n            noteCategory: parsedData.category,\n            noteCategoryIconColor: \"#466fb5\",\n            noteColor: parsedData.noteColor\n          });\n        }\n      }.bind(this));\n    }\n  }, {\n    key: \"_handleKeyCommand\",\n    value: function _handleKeyCommand(command) {\n      var editorState = this.state.editorState;\n      var newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        this.onChange(newState);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"saveNote\",\n    value: function () {\n      var _saveNote = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(title, category, noteID, noteContent) {\n        var convertedNoteContent, accessToken, AuthStr, headers, obj, saveNote;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                convertedNoteContent = convertToRaw(noteContent);\n                accessToken = localStorage.getItem('access_token');\n                AuthStr = 'Bearer '.concat(accessToken);\n                headers = {\n                  Authorization: AuthStr,\n                  'Content-Type': 'application/x-www-form-urlencoded'\n                };\n                obj = {\n                  title: title,\n                  category: category,\n                  noteID: noteID,\n                  noteContent: convertedNoteContent\n                };\n                saveNote = {\n                  method: 'POST',\n                  url: 'http://127.0.0.1:5000/save-note',\n                  body: JSON.stringify(obj),\n                  headers: headers\n                };\n                _context.next = 8;\n                return request(saveNote);\n\n              case 8:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function saveNote(_x, _x2, _x3, _x4) {\n        return _saveNote.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"speechNote\",\n    value: function speechNote(noteContent) {\n      var text = '';\n\n      for (var line in noteContent.blocks) {\n        text = text + noteContent.blocks[line].text + \". \";\n      }\n\n      return text;\n    }\n  }, {\n    key: \"changeToolBar\",\n    value: function changeToolBar(key) {\n      if (key === \"tools\") {\n        this.setState({\n          toolsButtonHighlight: {\n            'backgroundColor': '#466fb5',\n            'color': 'white',\n            isSelected: true\n          },\n          noteSettingsButtonHighlight: {\n            'border': 'none',\n            isSelected: false\n          },\n          'toolbar': {},\n          'toolbarCustomButtons': []\n        });\n      } else if (key === \"noteSettings\") {\n        this.setState({\n          noteSettingsButtonHighlight: {\n            'backgroundColor': '#466fb5',\n            'color': 'white',\n            isSelected: true\n          },\n          toolsButtonHighlight: {\n            'border': 'none',\n            isSelected: false\n          },\n          'toolbar': {\n            'options': []\n          },\n          'toolbarCustomButtons': [React.createElement(HyphenationOption, {\n            hyphenate: hyphenate,\n            noteID: this.state.noteID,\n            isHyphenated: this.state.isHyphenated,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          }), React.createElement(WordSpacingOption, {\n            setDocumentWordSpacing: setDocumentWordSpacing,\n            noteID: this.state.noteID,\n            wordSpacing: this.state.wordSpacing,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }), React.createElement(LineSpacingOption, {\n            setDocumentLineSpacing: setDocumentLineSpacing,\n            noteID: this.state.noteID,\n            lineSpacing: this.state.lineSpacing,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }), React.createElement(SpeechOption, {\n            speechText: convertToRaw(this.state.editorState.getCurrentContent()),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136\n            },\n            __self: this\n          }), React.createElement(NoteColor, {\n            changeNoteColor: changeNoteColor,\n            noteID: this.state.noteID,\n            noteColor: this.state.noteColor,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          })]\n        });\n      }\n    }\n  }, {\n    key: \"changeNoteCategory\",\n    value: function changeNoteCategory(noteCategory) {\n      if (noteCategory) {\n        this.setState({\n          noteCategory: noteCategory,\n          noteCategoryIconColor: \"#466fb5\"\n        });\n      } else {\n        this.setState({\n          noteCategory: noteCategory,\n          noteCategoryIconColor: \"gray\"\n        });\n      }\n    }\n  }, {\n    key: \"showSelectedButton\",\n    value: function showSelectedButton(buttonType) {\n      if (buttonType === \"tools\") {\n        if (!this.state.toolsButtonHighlight.isSelected) {\n          this.setState({\n            'toolsButtonHighlight': {\n              'backgroundColor': '#466fb5',\n              'color': 'white',\n              isSelected: false\n            }\n          });\n        }\n      }\n\n      if (buttonType === \"noteSettings\") {\n        if (!this.state.noteSettingsButtonHighlight.isSelected) {\n          this.setState({\n            'noteSettingsButtonHighlight': {\n              'backgroundColor': '#466fb5',\n              'color': 'white',\n              isSelected: false\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"hideSelectedButton\",\n    value: function hideSelectedButton(buttonType) {\n      if (buttonType === \"tools\") {\n        if (!this.state.toolsButtonHighlight.isSelected) {\n          this.setState({\n            'toolsButtonHighlight': {\n              'border': 'none',\n              isSelected: false\n            }\n          });\n        }\n      }\n\n      if (buttonType === \"noteSettings\") {\n        if (!this.state.noteSettingsButtonHighlight.isSelected) {\n          this.setState({\n            'noteSettingsButtonHighlight': {\n              'border': 'none',\n              isSelected: false\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"alwaysSaveNote\",\n    value: function alwaysSaveNote() {\n      if (this.state.noteTitle && this.state.noteCategory) {\n        this.saveNote(this.state.noteTitle, this.state.noteCategory, this.state.noteID, this.state.editorState.getCurrentContent());\n      } else if (!this.state.noteTitle && !this.state.noteCategory) {\n        this.saveNote(\"Untitled\", \"N/A\", this.state.noteID, this.state.editorState.getCurrentContent());\n      } else if (!this.state.noteCategory) {\n        this.saveNote(this.state.noteTitle, \"N/A\", this.state.noteID, this.state.editorState.getCurrentContent());\n      } else if (!this.state.noteTitle) {\n        this.saveNote(\"Untitled\", this.state.noteCategory, this.state.noteID, this.state.editorState.getCurrentContent());\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var editorState = this.state.editorState;\n      document.body.style.backgroundColor = \"#f5f5f5\";\n      this.alwaysSaveNote();\n      return React.createElement(\"div\", {\n        style: {\n          background: \"#f5f5f5\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(NavigationBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"add-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(Input, {\n        className: \"enter-title-here\",\n        placeholder: \"Untitled\",\n        onKeyPress: this._handleKeyPress,\n        value: this.state.noteTitle,\n        onChange: function onChange(noteTitle) {\n          return _this2.setState({\n            noteTitle: noteTitle.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), React.createElement(Icon, {\n        type: \"book\",\n        theme: \"filled\",\n        style: {\n          'color': this.state.noteCategoryIconColor\n        },\n        className: \"note-category-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(Input, {\n        className: \"enter-category-here\",\n        placeholder: \"Category\",\n        value: this.state.noteCategory,\n        onChange: function onChange(noteCategory) {\n          return _this2.changeNoteCategory(noteCategory.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(ConvertToPDF, {\n        noteID: this.state.noteID,\n        noteHTML: stateToHTML(this.state.editorState.getCurrentContent()),\n        noteColor: this.state.noteColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tab-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(Button, {\n        style: this.state.toolsButtonHighlight,\n        className: \"tab-buttons\",\n        onMouseEnter: function onMouseEnter() {\n          return _this2.showSelectedButton(\"tools\");\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this2.hideSelectedButton(\"tools\");\n        },\n        onClick: function onClick() {\n          return _this2.changeToolBar(\"tools\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Tools\"), React.createElement(Button, {\n        style: this.state.noteSettingsButtonHighlight,\n        className: \"tab-buttons\",\n        onMouseEnter: function onMouseEnter() {\n          return _this2.showSelectedButton(\"noteSettings\");\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this2.hideSelectedButton(\"noteSettings\");\n        },\n        onClick: function onClick() {\n          return _this2.changeToolBar(\"noteSettings\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"Note Settings\")), React.createElement(\"div\", {\n        className: \"RichEditor-root\",\n        id: \"textEdiotr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(Editor, {\n        spellCheck: true,\n        editorState: editorState,\n        toolbarClassName: \"rdw-storybook-toolbar\",\n        wrapperStyle: {\n          background: \"#f5f5f5\"\n        },\n        editorStyle: {\n          backgroundColor: this.state.noteColor\n        },\n        onEditorStateChange: this.onChange,\n        toolbarCustomButtons: this.state.toolbarCustomButtons,\n        toolbar: this.state.toolbar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Note;\n}(React.Component);\n\nfunction setDocumentWordSpacing(wordSpacing) {\n  var textfiled = document.getElementsByClassName('DraftEditor-root');\n  textfiled[0].style.wordSpacing = wordSpacing;\n}\n\nfunction setDocumentLineSpacing(lineSpacing) {\n  var textfiled = document.getElementsByClassName('DraftEditor-root');\n  textfiled[0].style.lineHeight = lineSpacing;\n} // Function for hyphenating the contents in text editor, binded with Note class.\n\n\nfunction hyphenate(child, noteID) {\n  var _this3 = this;\n\n  var postHyphenateChild = {\n    method: 'POST',\n    url: 'http://127.0.0.1:5000/change-hyphenation',\n    body: JSON.stringify({\n      noteID: noteID,\n      isHyphenated: child\n    }),\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n\n  if (child) {\n    var newContents = convertToRaw(this.state.editorState.getCurrentContent());\n    console.log(newContents);\n\n    var Hypher = require('hypher'),\n        english = require('hyphenation.en-us'),\n        h = new Hypher(english);\n\n    for (var line = 0; line < newContents.blocks.length; line++) {\n      //counts the number of dots added\n      var numberOfDots = 0; //parse the line into words by spaces\n\n      var oneLine = newContents.blocks[line]['text'].split(\" \");\n      var hyphenatedLine = \"\"; //hyphenate each work\n\n      for (var i = 0; i < oneLine.length; i++) {\n        var hyphenatedWord = h.hyphenate(oneLine[i]);\n\n        for (var j = 0; j < hyphenatedWord.length - 1; j++) {\n          // add unicode dot for each syllables\n          hyphenatedLine += hyphenatedWord[j] + \"\\u2022\";\n          numberOfDots += 1;\n        }\n\n        hyphenatedLine += hyphenatedWord[hyphenatedWord.length - 1] + \" \";\n      }\n\n      newContents.blocks[line]['text'] = hyphenatedLine; //change inline css style for the extra dot characters\n\n      newContents.blocks[line]['inlineStyleRanges'][0]['length'] += numberOfDots;\n      newContents.blocks[line]['inlineStyleRanges'][1]['length'] += numberOfDots;\n    }\n\n    request(postHyphenateChild, function (error, response, body) {\n      _this3.setState({\n        isHyphenated: child,\n        editorState: EditorState.createWithContent(convertFromRaw(newContents))\n      });\n    });\n  } //eliminate the splitter\n  else {\n      //hyphenate is off\n      var newContents = convertToRaw(this.state.editorState.getCurrentContent()); // go through each blocks/lines\n\n      for (var line = 0; line < newContents.blocks.length; line++) {\n        //parse the line into pieces splited by the dots\n        var oneLine = newContents.blocks[line]['text'].split(\"\\u2022\"); //counts the number of dots eliminated\n\n        var numberOfDots = oneLine.length - 1;\n        var restoredLine = \"\"; //hyphenate each work\n\n        for (var i = 0; i < oneLine.length; i++) {\n          restoredLine += oneLine[i];\n        }\n\n        newContents.blocks[line]['text'] = restoredLine; //change inline css style for the extra dot characters\n\n        newContents.blocks[line]['inlineStyleRanges'][0]['length'] -= numberOfDots;\n        newContents.blocks[line]['inlineStyleRanges'][1]['length'] -= numberOfDots;\n      }\n\n      request(postHyphenateChild, function (error, response, body) {\n        _this3.setState({\n          isHyphenated: child,\n          editorState: EditorState.createWithContent(convertFromRaw(newContents))\n        });\n      });\n    }\n} // Function for changing the note background color. Store the changes to database\n\n\nfunction changeNoteColor(noteID, color) {\n  var changeNoteColor = {\n    method: 'POST',\n    url: 'http://127.0.0.1:5000/change-note-color',\n    qs: {\n      noteID: noteID,\n      noteColor: color.hex\n    },\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n  request(changeNoteColor, function (error, response, body) {\n    this.setState({\n      noteColor: color.hex\n    });\n    location.reload();\n  }.bind(this));\n}\n\nexport default withRouter(Note);","map":{"version":3,"sources":["/Users/chrisackerman/Documents/Institute/WriteFree/front-end/WriteFree-frontend/draftjs/src/components/Editor/Note.js"],"names":["React","EditorState","RichUtils","convertToRaw","convertFromRaw","withRouter","Input","Button","Icon","request","Editor","NavigationBar","ConvertToPDF","HyphenationOption","NoteColor","SpeechOption","WordSpacingOption","LineSpacingOption","stateToHTML","Note","props","_handleKeyPress","e","key","state","editorState","createEmpty","noteCategory","undefined","noteTitle","noteCategoryIconColor","toolsButtonHighlight","isSelected","noteSettingsButtonHighlight","hyphenate","bind","changeNoteColor","focus","refs","editor","onChange","setState","handleKeyCommand","command","_handleKeyCommand","changeToolBar","localStorage","getItem","history","push","splitValue","window","location","href","split","noteID","length","accessToken","AuthStr","concat","headers","Authorization","fetchNote","method","url","String","qs","error","response","body","statusCode","parsedData","JSON","parse","noteSettings","setDocumentWordSpacing","wordSpacing","setDocumentLineSpacing","lineSpacing","contentState","createWithContent","noteColor","isHyphenated","title","content","category","newState","noteContent","convertedNoteContent","obj","saveNote","stringify","text","line","blocks","getCurrentContent","buttonType","document","style","backgroundColor","alwaysSaveNote","background","target","value","changeNoteCategory","showSelectedButton","hideSelectedButton","toolbarCustomButtons","toolbar","Component","textfiled","getElementsByClassName","lineHeight","child","postHyphenateChild","newContents","console","log","Hypher","require","english","h","numberOfDots","oneLine","hyphenatedLine","i","hyphenatedWord","j","restoredLine","color","hex","reload"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React from 'react';\nimport { EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\nimport { withRouter } from 'react-router-dom';\nimport { Input, Button, Icon } from 'antd';\nimport request from 'request';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport '../../css/note.css';\nimport 'antd/dist/antd.css';\nimport NavigationBar from \"../NavigationBar\";\nimport ConvertToPDF from \"./ToolBarOptions/ConvertToPDF\";\nimport HyphenationOption from \"./ToolBarOptions/Hyphenation\";\nimport NoteColor from \"./ToolBarOptions/NoteColor\";\nimport SpeechOption from \"./ToolBarOptions/TextToSpeech\";\nimport WordSpacingOption from \"./ToolBarOptions/WordSpacing\";\nimport LineSpacingOption from \"./ToolBarOptions/LineSpacing\";\nimport {stateToHTML} from 'draft-js-export-html';\n\nclass Note extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      noteCategory: undefined,\n      noteTitle: undefined,\n        noteCategoryIconColor: undefined,\n        toolsButtonHighlight: {'backgroundColor': '#466fb5', 'color': 'white', isSelected: true},\n        noteSettingsButtonHighlight: {'border': 'none', isSelected: false}\n    };\n    hyphenate = hyphenate.bind(this);\n    changeNoteColor = changeNoteColor.bind(this);\n    this.focus = () => this.refs.editor.focus();\n    this.onChange = editorState => this.setState({ editorState });\n    this.handleKeyCommand = command => this._handleKeyCommand(command);\n    this.changeToolBar = this.changeToolBar.bind(this);\n  }\n  componentDidMount() {\n      if (!localStorage.getItem('id')){\n          return this.props.history.push('/login')\n      }\n      const splitValue = window.location.href.split(\"/\")\n      const noteID = splitValue[splitValue.length - 1]\n      const accessToken = localStorage.getItem('access_token');\n      const AuthStr = 'Bearer '.concat(accessToken);\n      const headers = { Authorization: AuthStr, 'Content-Type': 'application/x-www-form-urlencoded' };\n    const fetchNote = {\n      method: 'GET',\n      url: `http://127.0.0.1:5000/fetch-note/${String(noteID)}`,\n      qs: { noteID },\n      headers: headers,\n    };\n    request(fetchNote, function (error, response, body) {\n        if (response.statusCode === 404){\n            return this.props.history.push('/error404')\n        }\n        var parsedData = JSON.parse(body);\n        if (parsedData.noteSettings){\n            setDocumentWordSpacing(parsedData.wordSpacing);\n            setDocumentLineSpacing(parsedData.lineSpacing);\n            let contentState = parsedData.noteSettings;\n            this.setState({\n                editorState: EditorState.createWithContent(convertFromRaw((contentState))),\n                noteColor: parsedData.noteColor,\n                wordSpacing: parsedData.wordSpacing,\n                lineSpacing: parsedData.lineSpacing,\n                noteID: noteID,\n                isHyphenated: parsedData.isHyphenated\n            });\n        }\n        if (parsedData.title){\n            let contentState = parsedData.content;\n            this.setState({\n                editorState: EditorState.createWithContent(convertFromRaw((contentState))),\n                noteTitle: parsedData.title,\n                noteCategory: parsedData.category,\n                noteCategoryIconColor: \"#466fb5\",\n                noteColor: parsedData.noteColor,\n            });\n        }\n    }.bind(this));\n  }\n\n    _handleKeyCommand(command) {\n        const {editorState} = this.state;\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n            this.onChange(newState);\n            return true;\n        }\n        return false;\n    }\n\n    async saveNote(title, category, noteID, noteContent){\n        const convertedNoteContent = convertToRaw(noteContent)\n        const accessToken = localStorage.getItem('access_token');\n        const AuthStr = 'Bearer '.concat(accessToken);\n        const headers = { Authorization: AuthStr, 'Content-Type': 'application/x-www-form-urlencoded' };\n\n        const obj = {title, category, noteID, noteContent: convertedNoteContent}\n        var saveNote = {\n            method: 'POST',\n            url: 'http://127.0.0.1:5000/save-note',\n            body: JSON.stringify(obj),\n            headers: headers,\n        };\n        return await request(saveNote)\n    }\n\n\n    speechNote(noteContent){\n        var text = '';\n        for (var line in noteContent.blocks){\n            text = text + (noteContent.blocks[line].text) + \". \"\n        }\n        return text\n    }\n\n    changeToolBar(key){\n        if (key === \"tools\"){\n            this.setState({\n                toolsButtonHighlight: {'backgroundColor': '#466fb5', 'color': 'white', isSelected: true},\n                noteSettingsButtonHighlight: {'border': 'none', isSelected: false},\n                'toolbar': {}, 'toolbarCustomButtons': []\n            })\n        }\n        else if (key === \"noteSettings\") {\n            this.setState({\n                noteSettingsButtonHighlight: {'backgroundColor': '#466fb5', 'color': 'white', isSelected: true},\n                toolsButtonHighlight: {'border': 'none', isSelected: false},\n                'toolbar': {'options': []},\n                'toolbarCustomButtons': [\n                    <HyphenationOption hyphenate={hyphenate} noteID={this.state.noteID} isHyphenated={this.state.isHyphenated}/>,\n                    <WordSpacingOption setDocumentWordSpacing={setDocumentWordSpacing} noteID={this.state.noteID} wordSpacing={this.state.wordSpacing}/>,\n                    <LineSpacingOption setDocumentLineSpacing={setDocumentLineSpacing} noteID={this.state.noteID} lineSpacing={this.state.lineSpacing}/>,\n                    <SpeechOption speechText={convertToRaw(this.state.editorState.getCurrentContent())}/>,\n                    <NoteColor changeNoteColor ={changeNoteColor} noteID={this.state.noteID} noteColor={this.state.noteColor}/>]\n            })\n        }\n    }\n\n    changeNoteCategory(noteCategory){\n        if(noteCategory){\n            this.setState({noteCategory, noteCategoryIconColor: \"#466fb5\"})\n        } else {\n            this.setState({noteCategory, noteCategoryIconColor: \"gray\"})\n        }\n\n    }\n\n    _handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n        }\n    };\n\n    showSelectedButton(buttonType){\n      if (buttonType === \"tools\"){\n          if (!this.state.toolsButtonHighlight.isSelected){\n              this.setState({'toolsButtonHighlight': {'backgroundColor': '#466fb5', 'color': 'white', isSelected: false}})\n          }\n      }\n        if (buttonType === \"noteSettings\"){\n            if (!this.state.noteSettingsButtonHighlight.isSelected){\n                this.setState({'noteSettingsButtonHighlight': {'backgroundColor': '#466fb5', 'color': 'white', isSelected: false}})\n            }\n        }\n\n    }\n\n    hideSelectedButton(buttonType){\n        if (buttonType === \"tools\"){\n            if (!this.state.toolsButtonHighlight.isSelected){\n                this.setState({'toolsButtonHighlight': {'border': 'none', isSelected: false}})\n            }\n        }\n        if (buttonType === \"noteSettings\"){\n            if (!this.state.noteSettingsButtonHighlight.isSelected){\n                this.setState({'noteSettingsButtonHighlight': {'border': 'none', isSelected: false}})\n            }\n\n        }\n\n    }\n\n    alwaysSaveNote(){\n        if (this.state.noteTitle && this.state.noteCategory){\n            this.saveNote(this.state.noteTitle, this.state.noteCategory, this.state.noteID, this.state.editorState.getCurrentContent())\n        } else if (!this.state.noteTitle && !this.state.noteCategory) {\n            this.saveNote(\"Untitled\", \"N/A\", this.state.noteID, this.state.editorState.getCurrentContent())\n        } else if (!this.state.noteCategory) {\n            this.saveNote(this.state.noteTitle, \"N/A\", this.state.noteID, this.state.editorState.getCurrentContent())\n        } else if (!this.state.noteTitle) {\n            this.saveNote(\"Untitled\", this.state.noteCategory, this.state.noteID, this.state.editorState.getCurrentContent())\n        }\n\n    }\n\n    render() {\n        const {editorState} = this.state;\n        document.body.style.backgroundColor = \"#f5f5f5\"\n        this.alwaysSaveNote()\n        return (\n            <div style={{background: \"#f5f5f5\"}}>\n                <NavigationBar/>\n                <div className={\"add-title\"}>\n                    <Input className={\"enter-title-here\"} placeholder={\"Untitled\"} onKeyPress={this._handleKeyPress} value={this.state.noteTitle} onChange={noteTitle => this.setState({noteTitle: noteTitle.target.value})}></Input>\n                    <Icon type=\"book\" theme=\"filled\" style={{'color': this.state.noteCategoryIconColor}} className={\"note-category-icon\"} />\n                    <Input className={\"enter-category-here\"} placeholder={\"Category\"} value={this.state.noteCategory} onChange={noteCategory => this.changeNoteCategory(noteCategory.target.value)}></Input>\n                    <ConvertToPDF noteID={this.state.noteID} noteHTML={stateToHTML(this.state.editorState.getCurrentContent())} noteColor={this.state.noteColor}/>\n                </div>\n                <div className={\"tab-bar\"}>\n                    <Button\n                        style={this.state.toolsButtonHighlight}\n                        className={\"tab-buttons\"}\n                        onMouseEnter={() => this.showSelectedButton(\"tools\")}\n                        onMouseLeave={() => this.hideSelectedButton(\"tools\")}\n                        onClick={() => this.changeToolBar(\"tools\")}>\n                        Tools\n                    </Button>\n                    <Button\n                        style={this.state.noteSettingsButtonHighlight}\n                        className={\"tab-buttons\"}\n                        onMouseEnter={() => this.showSelectedButton(\"noteSettings\")}\n                        onMouseLeave={() => this.hideSelectedButton(\"noteSettings\")}\n                        onClick={() => this.changeToolBar(\"noteSettings\")}>\n                        Note Settings\n                    </Button>\n                </div>\n\n            <div className=\"RichEditor-root\" id={\"textEdiotr\"}>\n                <Editor\n                    spellCheck={true}\n                    editorState={editorState}\n                    toolbarClassName=\"rdw-storybook-toolbar\"\n                    wrapperStyle={{background: \"#f5f5f5\"}}\n                    editorStyle={{backgroundColor: this.state.noteColor}}\n                    onEditorStateChange={this.onChange}\n                    toolbarCustomButtons={this.state.toolbarCustomButtons}\n                    toolbar={this.state.toolbar}\n                />\n            </div>\n                <br/>\n            </div>\n        );\n    }\n}\n\nfunction setDocumentWordSpacing(wordSpacing) {\n    var textfiled = document.getElementsByClassName('DraftEditor-root');\n    textfiled[0].style.wordSpacing = wordSpacing;\n}\n\nfunction setDocumentLineSpacing(lineSpacing) {\n    var textfiled = document.getElementsByClassName('DraftEditor-root');\n    textfiled[0].style.lineHeight = lineSpacing;\n}\n\n// Function for hyphenating the contents in text editor, binded with Note class.\nfunction hyphenate(child, noteID) {\n    const postHyphenateChild = {\n        method: 'POST',\n        url: 'http://127.0.0.1:5000/change-hyphenation',\n        body: JSON.stringify({ noteID: noteID, isHyphenated: child }),\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    };\n    if (child) {\n        var newContents = convertToRaw(this.state.editorState.getCurrentContent());\n        console.log(newContents)\n        var Hypher = require('hypher'),\n            english = require('hyphenation.en-us'),\n            h = new Hypher(english);\n        for (var line = 0; line < newContents.blocks.length; line++) {\n            //counts the number of dots added\n            var numberOfDots = 0;\n            //parse the line into words by spaces\n            var oneLine = newContents.blocks[line]['text'].split(\" \");\n            var hyphenatedLine = \"\";\n            //hyphenate each work\n            for (var i = 0; i < oneLine.length; i++) {\n                var hyphenatedWord = h.hyphenate(oneLine[i]);\n                for (var j = 0; j < hyphenatedWord.length - 1; j++) {\n                    // add unicode dot for each syllables\n                    hyphenatedLine += hyphenatedWord[j] + \"\\u2022\";\n                    numberOfDots += 1;\n                }\n                hyphenatedLine += hyphenatedWord[hyphenatedWord.length - 1] + \" \";\n            }\n            newContents.blocks[line]['text'] = hyphenatedLine;\n            //change inline css style for the extra dot characters\n            newContents.blocks[line]['inlineStyleRanges'][0]['length'] += numberOfDots;\n            newContents.blocks[line]['inlineStyleRanges'][1]['length'] += numberOfDots;\n        }\n        request(postHyphenateChild, (error, response, body) => {\n            this.setState({\n                isHyphenated: child,\n                editorState: EditorState.createWithContent(convertFromRaw((newContents))),\n            });\n        });\n\n    }\n    //eliminate the splitter\n    else { //hyphenate is off\n        var newContents = convertToRaw(this.state.editorState.getCurrentContent());\n        // go through each blocks/lines\n        for (var line = 0; line < newContents.blocks.length; line++) {\n            //parse the line into pieces splited by the dots\n            var oneLine = newContents.blocks[line]['text'].split(\"\\u2022\");\n            //counts the number of dots eliminated\n            var numberOfDots = oneLine.length - 1;\n            var restoredLine = \"\";\n            //hyphenate each work\n            for (var i = 0; i < oneLine.length; i++) {\n                restoredLine += oneLine[i];\n            }\n            newContents.blocks[line]['text'] = restoredLine;\n            //change inline css style for the extra dot characters\n            newContents.blocks[line]['inlineStyleRanges'][0]['length'] -= numberOfDots;\n            newContents.blocks[line]['inlineStyleRanges'][1]['length'] -= numberOfDots;\n        }\n\n\n        request(postHyphenateChild, (error, response, body) => {\n            this.setState({\n                isHyphenated: child,\n                editorState: EditorState.createWithContent(convertFromRaw((newContents))),\n            });\n        });\n    }\n}\n\n// Function for changing the note background color. Store the changes to database\nfunction changeNoteColor(noteID, color) {\n    var changeNoteColor = {\n        method: 'POST',\n        url: 'http://127.0.0.1:5000/change-note-color',\n        qs: {noteID, noteColor: color.hex},\n        headers: {'Content-Type': 'application/x-www-form-urlencoded' }\n    };\n    request(changeNoteColor, function (error, response, body) {\n        this.setState({ noteColor: color.hex });\n        location.reload();\n    }.bind(this));\n}\n\nexport default withRouter(Note);\n"]},"metadata":{},"sourceType":"module"}